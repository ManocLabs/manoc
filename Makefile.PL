# This file was automatically generated by Dist::Zilla::Plugin::MakeMaker v6.011.
use strict;
use warnings;



use ExtUtils::MakeMaker;

use File::ShareDir::Install;
$File::ShareDir::Install::INCLUDE_DOTFILES = 1;
$File::ShareDir::Install::INCLUDE_DOTDIRS = 1;
install_share dist => "root";


my %WriteMakefileArgs = (
  "ABSTRACT" => "Network monitoring application",
  "AUTHOR" => "Gabriele Mambrini <gmambro\@cpan.org>, Enrico Liguori",
  "CONFIGURE_REQUIRES" => {
    "CPAN::Meta::Requirements" => "2.120620",
    "ExtUtils::MakeMaker" => 0,
    "File::ShareDir::Install" => "0.06",
    "Module::Metadata" => 0
  },
  "DISTNAME" => "App-Manoc",
  "LICENSE" => "perl",
  "NAME" => "App::Manoc",
  "PREREQ_PM" => {
    "Archive::Tar" => 0,
    "Catalyst::Action::RenderView" => 0,
    "Catalyst::Authentication::Credential::HTTP" => 0,
    "Catalyst::Authentication::Store::DBIx::Class" => 0,
    "Catalyst::Plugin::ConfigLoader" => 0,
    "Catalyst::Plugin::Session" => 0,
    "Catalyst::Plugin::Session::State::Cookie" => 0,
    "Catalyst::Plugin::Session::Store::DBI" => 0,
    "Catalyst::Plugin::StackTrace" => 0,
    "Catalyst::Plugin::Static::Simple" => 0,
    "Catalyst::Runtime" => "5.9",
    "Catalyst::View::CSV" => "1.7",
    "Catalyst::View::JSON" => 0,
    "Catalyst::View::TT" => 0,
    "Class::Load" => 0,
    "Config::General" => 0,
    "Config::ZOMG" => "1.0",
    "Crypt::Eksblowfish::Bcrypt" => 0,
    "DBD::SQLite" => 0,
    "DBI" => 0,
    "DBIx::Class" => 0,
    "DBIx::Class::EncodedColumn" => 0,
    "DBIx::Class::Helpers" => 0,
    "DBIx::Class::Tree" => 0,
    "DateTime::Format::RFC3339" => 0,
    "Digest::SHA1" => 0,
    "HTML::FormHandler" => 0,
    "HTML::FormHandler::Model::DBIC" => 0,
    "JSON::MaybeXS" => 0,
    "Log::Log4perl" => "1.46",
    "Module::Runtime" => 0,
    "Moose" => 0,
    "MooseX::Daemonize" => 0,
    "MooseX::Getopt" => 0,
    "MooseX::Storage" => 0,
    "MooseX::Workers" => 0,
    "Net::NBName" => 0,
    "Net::OpenSSH" => 0,
    "Net::SNMP" => 0,
    "POE" => 0,
    "Plack::Middleware::ReverseProxy" => 0,
    "Regexp::Common" => 0,
    "SQL::Translator" => 0,
    "Test::Deep" => 0,
    "Text::CSV" => 0,
    "YAML::Syck" => 0,
    "namespace::autoclean" => 0
  },
  "TEST_REQUIRES" => {
    "File::Spec" => 0,
    "IO::Handle" => 0,
    "IPC::Open3" => 0,
    "Test::More" => 0,
    "Test::WWW::Mechanize::Catalyst" => "0.60"
  },
  "VERSION" => "2.99.3",
  "test" => {
    "TESTS" => "t/*.t t/controller/*.t t/controller/api/*.t t/model/*.t"
  }
);


my %FallbackPrereqs = (
  "Archive::Tar" => 0,
  "Catalyst::Action::RenderView" => 0,
  "Catalyst::Authentication::Credential::HTTP" => 0,
  "Catalyst::Authentication::Store::DBIx::Class" => 0,
  "Catalyst::Plugin::ConfigLoader" => 0,
  "Catalyst::Plugin::Session" => 0,
  "Catalyst::Plugin::Session::State::Cookie" => 0,
  "Catalyst::Plugin::Session::Store::DBI" => 0,
  "Catalyst::Plugin::StackTrace" => 0,
  "Catalyst::Plugin::Static::Simple" => 0,
  "Catalyst::Runtime" => "5.9",
  "Catalyst::View::CSV" => "1.7",
  "Catalyst::View::JSON" => 0,
  "Catalyst::View::TT" => 0,
  "Class::Load" => 0,
  "Config::General" => 0,
  "Config::ZOMG" => "1.0",
  "Crypt::Eksblowfish::Bcrypt" => 0,
  "DBD::SQLite" => 0,
  "DBI" => 0,
  "DBIx::Class" => 0,
  "DBIx::Class::EncodedColumn" => 0,
  "DBIx::Class::Helpers" => 0,
  "DBIx::Class::Tree" => 0,
  "DateTime::Format::RFC3339" => 0,
  "Digest::SHA1" => 0,
  "File::Spec" => 0,
  "HTML::FormHandler" => 0,
  "HTML::FormHandler::Model::DBIC" => 0,
  "IO::Handle" => 0,
  "IPC::Open3" => 0,
  "JSON::MaybeXS" => 0,
  "Log::Log4perl" => "1.46",
  "Module::Runtime" => 0,
  "Moose" => 0,
  "MooseX::Daemonize" => 0,
  "MooseX::Getopt" => 0,
  "MooseX::Storage" => 0,
  "MooseX::Workers" => 0,
  "Net::NBName" => 0,
  "Net::OpenSSH" => 0,
  "Net::SNMP" => 0,
  "POE" => 0,
  "Plack::Middleware::ReverseProxy" => 0,
  "Regexp::Common" => 0,
  "SQL::Translator" => 0,
  "Test::Deep" => 0,
  "Test::More" => 0,
  "Test::WWW::Mechanize::Catalyst" => "0.60",
  "Text::CSV" => 0,
  "YAML::Syck" => 0,
  "namespace::autoclean" => 0
);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.034
requires('DBD::Pg')
  if has_module('DBD::Pg')
    || prompt('install Postgres support? [y/N]', 'N') =~ /^y/i;
requires('DBD::mysql')
  if has_module('DBD::mysql')
    || prompt('install Postgres support? [y/N]', 'N') =~ /^y/i;


unless ( eval { ExtUtils::MakeMaker->VERSION(6.63_03) } ) {
  delete $WriteMakefileArgs{TEST_REQUIRES};
  delete $WriteMakefileArgs{BUILD_REQUIRES};
  $WriteMakefileArgs{PREREQ_PM} = \%FallbackPrereqs;
}

delete $WriteMakefileArgs{CONFIGURE_REQUIRES}
  unless eval { ExtUtils::MakeMaker->VERSION(6.52) };

WriteMakefile(%WriteMakefileArgs);

{
package
MY;
use File::ShareDir::Install qw(postamble);
}

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.034
sub _add_prereq {
  my ($mm_key, $module, $version_or_range) = @_;
  $version_or_range ||= 0;
  warn "$module already exists in $mm_key (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $WriteMakefileArgs{$mm_key}{$module}
      and $WriteMakefileArgs{$mm_key}{$module} ne '0'
      and $WriteMakefileArgs{$mm_key}{$module} ne $version_or_range;
  warn "$module already exists in FallbackPrereqs (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $FallbackPrereqs{$module} and $FallbackPrereqs{$module} ne '0'
        and $FallbackPrereqs{$module} ne $version_or_range;
  $WriteMakefileArgs{$mm_key}{$module} = $FallbackPrereqs{$module} = $version_or_range;
  return;
}

sub has_module {
  my ($module, $version_or_range) = @_;
  require Module::Metadata;
  my $mmd = Module::Metadata->new_from_module($module);
  return undef if not $mmd;
  return $mmd->version($module) if not defined $version_or_range;

  require CPAN::Meta::Requirements;
  my $req = CPAN::Meta::Requirements->new;
  $req->add_string_requirement($module => $version_or_range);
  return 1 if $req->accepts_module($module => $mmd->version($module));
  return 0;
}

sub requires { goto &runtime_requires }

sub runtime_requires {
  my ($module, $version_or_range) = @_;
  _add_prereq(PREREQ_PM => $module, $version_or_range);
}
